{"version":3,"sources":["App.js","index.js"],"names":["App","webcamRef","useRef","useState","model","setModel","a","tf","console","log","useEffect","then","loadModel","detect","current","video","readyState","cakeTensor","fromPixels","resized","resizeBilinear","expand","predict","obj","element","document","getElementById","innerHTML","Math","ceil","dataSync","dict","0","1","2","3","4","max_elem","max","apply","index","indexOf","className","style","fontSize","onClick","width","height","ref","muted","id","background","ReactDOM","render","StrictMode"],"mappings":"kaA2GeA,MArGf,WACE,IAAMC,EAAYC,iBAAO,MADZ,EAGaC,qBAHb,mBAGNC,EAHM,KAGCC,EAHD,iDAKb,4BAAAC,EAAA,+EAEwBC,IAAkB,2BAF1C,OAEUH,EAFV,OAGIC,EAASD,GACTI,QAAQC,IAAI,sBAJhB,gDAOID,QAAQC,IAAR,MAPJ,0DALa,sBAiBbC,qBAAU,WACRH,MAAWI,MAAK,YAlBL,mCAmBXC,QAEC,IAEH,IAAMC,EAAM,uCAAG,WAAOT,GAAP,+BAAAE,EAAA,yDAGkB,qBAAtBL,EAAUa,SACK,OAAtBb,EAAUa,SAC6B,IAAvCb,EAAUa,QAAQC,MAAMC,WALb,wBAQLD,EAAQd,EAAUa,QAAQC,MAC1BE,EAAaV,IAAWW,WAAWH,GACnCI,EAAUZ,IAASa,eAAeH,EAAY,CAAC,IAAK,MACpDI,EAASd,IAAcA,IAAcY,EAAS,GAAI,GAX7C,SAYOf,EAAMkB,QAAQD,GAZrB,OAYLE,EAZK,QAcPC,EAAUC,SAASC,eAAe,gBAC9BC,UAAY,QAASC,KAAKC,KAAyB,IAApBN,EAAI,GAAGO,YAC1CP,EAAI,GAAGO,WAAW,GAAKP,EAAI,GAAGO,WAAW,GAE3CN,EAAQG,WAAa,qBAGrBH,EAAQG,WAAa,uBAEnBI,EAAO,CACTC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,SACHC,EAAG,UAGCC,EAAWT,KAAKU,IAAIC,MAAMX,KAAML,EAAI,GAAGO,YACvCU,EAAQjB,EAAI,GAAGO,WAAWW,QAAQJ,GACxCb,EAAQG,WAAa,eAAsBI,EAAKS,GAjCrC,4CAAH,sDAyCZ,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAGC,MAAO,CAACC,SAAU,KAArB,mFAGA,uBAAGD,MAAO,CAACC,SAAU,KAArB,qDAGA,4BAAQC,QAbA,WACZhC,EAAOT,IAaDuC,MAAO,CACLG,MAAO,QACPC,OAAQ,OACRH,SAAU,KAJd,WAQA,6BACE,kBAAC,IAAD,CACEI,IAAK/C,EACLgD,OAAO,KAGX,yBAAKC,GAAG,cACNP,MAAO,CACLG,MAAO,QACPC,OAAQ,OACRI,WAAY,QACZP,SAAU,SC7FtBQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,W","file":"static/js/main.50a2eaef.chunk.js","sourcesContent":["// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n\r\n  const [model, setModel] = useState();\r\n\r\n  async function loadModel() {\r\n    try {\r\n      const model = await tf.loadGraphModel(\"./tfjs_model/model.json\");\r\n      setModel(model);\r\n      console.log(\"Load model success\")\r\n    }\r\n      catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  //React Hook\r\n  useEffect(()=>{\r\n    tf.ready().then(()=>{\r\n    loadModel()\r\n    });\r\n  }, [])\r\n\r\n  const detect = async (model) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n\r\n      const video = webcamRef.current.video;\r\n      const cakeTensor = tf.browser.fromPixels(video);\r\n      const resized = tf.image.resizeBilinear(cakeTensor, [198, 198])\r\n      const expand = tf.expandDims(tf.expandDims(resized, 0), 0);\r\n      const obj = await model.predict(expand);\r\n\r\n      let element = document.getElementById(\"Result_text\");\r\n      element.innerHTML = \"Age: \"+ Math.ceil(obj[0].dataSync() * 116.0)\r\n      if (obj[1].dataSync()[0] > obj[1].dataSync()[1])\r\n      {\r\n        element.innerHTML += \"<br />\" + \"Gender: Male\";\r\n      } else \r\n      {\r\n        element.innerHTML += \"<br />\" + \"Gender: Female\";\r\n      }\r\n      var dict = {\r\n        0: 'white', \r\n        1: 'black', \r\n        2: 'asian', \r\n        3: 'indian', \r\n        4: 'others'\r\n      };\r\n      \r\n      const max_elem = Math.max.apply(Math, obj[2].dataSync());\r\n      const index = obj[2].dataSync().indexOf(max_elem);\r\n      element.innerHTML += \"<br />\" + \"Race: \" + dict[index];\r\n    }\r\n  };\r\n\r\n  const shoot = () => {\r\n    detect(model);\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <b style={{fontSize: 20}}>\r\n          Webcam must see your face completely and clearly (without headphones or masks).\r\n        </b>\r\n        <b style={{fontSize: 20}}>\r\n          Please try to get your face closer to the camera.\r\n        </b>\r\n        <button onClick={shoot} \r\n          style={{\r\n            width: \"100px\", \r\n            height: \"30px\",\r\n            fontSize: 20,\r\n          }}>\r\n          Predict\r\n        </button>\r\n        <div>\r\n          <Webcam\r\n            ref={webcamRef}\r\n            muted={true} \r\n          />\r\n        </div>\r\n        <div id=\"Result_text\"\r\n          style={{\r\n            width: \"300px\",\r\n            height: \"80px\",\r\n            background: \"black\",\r\n            fontSize: 20,\r\n          }}>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}